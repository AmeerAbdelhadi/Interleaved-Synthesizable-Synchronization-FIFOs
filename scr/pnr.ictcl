####################################################################################
## Copyright (c) 2016, University of British Columbia (UBC)  All rights reserved. ##
##                                                                                ##
## Redistribution  and  use  in  source   and  binary  forms,   with  or  without ##
## modification,  are permitted  provided that  the following conditions are met: ##
##   * Redistributions   of  source   code  must  retain   the   above  copyright ##
##     notice,  this   list   of   conditions   and   the  following  disclaimer. ##
##   * Redistributions  in  binary  form  must  reproduce  the  above   copyright ##
##     notice, this  list  of  conditions  and the  following  disclaimer in  the ##
##     documentation and/or  other  materials  provided  with  the  distribution. ##
##   * Neither the name of the University of British Columbia (UBC) nor the names ##
##     of   its   contributors  may  be  used  to  endorse  or   promote products ##
##     derived from  this  software without  specific  prior  written permission. ##
##                                                                                ##
## THIS  SOFTWARE IS  PROVIDED  BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" ##
## AND  ANY EXPRESS  OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT LIMITED TO,  THE ##
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE ##
## DISCLAIMED.  IN NO  EVENT SHALL University of British Columbia (UBC) BE LIABLE ##
## FOR ANY DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL ##
## DAMAGES  (INCLUDING,  BUT NOT LIMITED TO,  PROCUREMENT OF  SUBSTITUTE GOODS OR ##
## SERVICES;  LOSS OF USE,  DATA,  OR PROFITS;  OR BUSINESS INTERRUPTION) HOWEVER ##
## CAUSED AND ON ANY THEORY OF LIABILITY,  WHETHER IN CONTRACT, STRICT LIABILITY, ##
## OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ##
## OF  THIS SOFTWARE,  EVEN  IF  ADVISED  OF  THE  POSSIBILITY  OF  SUCH  DAMAGE. ##
####################################################################################

####################################################################################
##                   Place & Route with Synopsys IC Compiler                      ##
##             Author: Ameer Abdelhadi (ameer.abdelhadi@gmail.com)                ##
## Cell-based interleaved FIFO :: The University of British Columbia :: Nov. 2016 ##
####################################################################################

global env

# define library design kit and synthesis tools variables
# Change these links to your own design kit location
#   TSMC65: library base link
#   LIBNAM: library name
#   LIBCOR: library corner, wc: worst case, tc: typical case, bc: best case
#   LIBDBB: library DBB database link
#   LIBLEF: a link to library LEF files
#   LIBGDS: a link to library GDS files
#   LIBVRL: a link to library Verilog files
#   SYNOPS: a link to Synopsys tools directory
#   TOPMOS: Verilog top module name
set TSMC65 $env(TSMC65)
set LIBNAM $env(LIBNAM)
set LIBCOR $env(LIBCOR)
set LIBDBB $env(LIBDBB)
set LIBLEF $env(LIBLEF)
set LIBGDS $env(LIBGDS)
set LIBVRL $env(LIBVRL)
set LIBMLW $env(LIBMLW)
set SYNOPS $env(SYNOPSYS)


# Design variables
#   VERSTG   : Number of vertical stages
#   HORSTG   : Number of horizontal stages
#   OPRFRQ   : Bus  clock frequency for place and route
#   STAGES   : Core clock frequency for place and route
#   DATAWD   : Bus  clock frequency for timing analysis
#   RUNNAM   : Current run name, used as prefix to file names
#   SYNFRQSCL: Core clock frequency for timing analysis
set VERSTG        $env(VERSTG)
set HORSTG        $env(HORSTG)
set DATAWD        $env(DATAWD)
set OPRFRQ        $env(OPRFRQ)
set RUNNAM        $env(RUNNAM)
set CLKDSYNFRQSCL $env(CLKDSYNFRQSCL)
set ASYNSYNFRQSCL $env(ASYNSYNFRQSCL)

# define environemt variables and output library locatiobs
#   RUNDIR: home directory
#   SCRDIR: scripts directory
#   RTLDIR: RTL directory
#   REPDIR: design reports directory
#   LOGDIR: run logs directory
#   SIMDIR: logic simulation related files
#   STADIR: Static Timing Analysis (STA) related files
#   RCEDIR: RC extraction related files directory
#   CTSDIR: Clock Tree Synthesis (CTS) related files
#   ECODIR: ECO (design changes in p&r) related files
#   ENCDIR: SoC Encounter related files
#   GDSDIR: generated GDS directory
#   NETDIR: netlists directory
#   PWRDIR: power estimates directory
set RUNDIR $env(RUNDIR)
set SCRDIR $env(SCRDIR)
set RTLDIR $env(RTLDIR)
set REPDIR $env(REPDIR)
set LOGDIR $env(LOGDIR)
set NETDIR $env(NETDIR)
set ENCDIR $env(ENCDIR)
set STADIR $env(STADIR)
set CTSDIR $env(CTSDIR)
set ECODIR $env(ECODIR)
set RCEDIR $env(RCEDIR)
set GDSDIR $env(GDSDIR)
set SIMDIR $env(SIMDIR)
set PWRDIR $env(PWRDIR)

# wait delay_sec before proceeding execution
proc execWait {delay_sec} {
  fconfigure stdin -blocking 0
  for {set i 1} {$i<=$delay_sec} {incr i} {
    after 1000 
    gets stdin
    set isBlocked [eval fblocked stdin]
    if {!$isBlocked} {break}
    set numbering "[$i]"
    set backSpace ""
    set backSpace [eval string repeat "\b" [string length $numbering]]
    echo -n "$numbering"
    if {$i < $delay_sec} {echo -n "$backSpace"} else {echo ""}
  }
  fconfigure stdin -blocking 1
  return $isBlocked
}

# print synthesis start time
set startTime [clock seconds]
puts "\n@@ Logic synthesis with Synopsys Design Compiler started on [clock format $startTime]\n\n"

# define PDK library
set search_path         [list . $SYNOPS/libraries/syn $SYNOPS/dw/syn_ver $SYNOPS/dw/sim_ver]
set target_library      [list   $LIBDBB/$LIBNAM$LIBCOR.db                                  ]
set link_library        [list * $LIBDBB/$LIBNAM$LIBCOR.db dw_foundation.sldb               ]
set synthetic_library   [list                             dw_foundation.sldb               ]
set synlib_library_list [list   DW01 DW02 DW03 DW04 DW05 DW06                              ]

set_app_var mw_logic1_net "VDD"
set_app_var mw_logic0_net "VSS"


# Open Milkyway library project
set mw_design_library $NETDIR/${RUNNAM}_MW_LIB
open_mw_lib $mw_design_library
convert_mw_lib -all $mw_design_library
open_mw_cel preLO
current_mw_cel preLO
check_library

# set timing and cap libraries
set_tlu_plus_files \
-max_tluplus  $LIBMLW/techfiles/tluplus/cln65g+_1p09m+alrdl_rcworst_top2.tluplus \
-min_tluplus  $LIBMLW/techfiles/tluplus/cln65g+_1p09m+alrdl_rcbest_top2.tluplus  \
-tech2itf_map $LIBMLW/techfiles/tluplus/star.map_9M
check_tlu_plus_files

create_floorplan -control_type aspect_ratio -core_utilization 0.7

# check -cts
place_opt -effort high -cts

# check -only_psyn -inter_clock_balance -update_clock_latency -size_only -in_place_size_only
clock_opt
clock_opt -only_psyn
clock_opt -in_place_size_only

# check -size_only -optimize_wire_via -wire_size -incremental -only_wire_size
route_opt -effort high
route_opt -effort high -incremental -optimize_wire_via
route_opt -effort high -incremental -wire_size
route_opt -effort high -incremental -only_wire_size
route_opt -effort high -incremental -size_only

save_mw_cel -as postLO
create_ilm

# generate post-compile reports
redirect $REPDIR/${RUNNAM}.check_design.postcompile.pnr.rep {check_design      -post_layout                 }
redirect $REPDIR/${RUNNAM}.report_constraint.pnr.rep        {report_constraint -all_violators               }
redirect $REPDIR/${RUNNAM}.report_area.pnr.rep              {report_area       -nosplit -physical -hierarchy}
redirect $REPDIR/${RUNNAM}.report_design.pnr.rep            {report_design     -nosplit -physical           }
redirect $REPDIR/${RUNNAM}.report_port.pnr.rep              {report_port       -nosplit -physical           }
redirect $REPDIR/${RUNNAM}.report_clocks.pnr.rep            {report_clocks     -nosplit                     }
redirect $REPDIR/${RUNNAM}.report_clock_tree.pnr.rep        {report_clock_tree -nosplit                     }
redirect $REPDIR/${RUNNAM}.report_cell.pnr.rep              {report_cell       -nosplit -physical           }
redirect $REPDIR/${RUNNAM}.report_timing.pnr.rep            {report_timing     -nosplit -physical           }
redirect $REPDIR/${RUNNAM}.report_power.pnr.rep             {report_power      -nosplit                     }
redirect $REPDIR/${RUNNAM}.report_ref.pnr.rep               {report_reference       -nosplit      -hierarchy}

change_names -rules verilog -hierarchy
write_verilog $NETDIR/${RUNNAM}.pnr.vh
write_sdc -version 1.8 -nosplit $STADIR/${RUNNAM}.pnr.sdc
write_sdf -version 2.1 $STADIR/${RUNNAM}.pnr.sdf
write_parasitics -format SPEF -output $RCEDIR/${RUNNAM}.spef

close_mw_cel

exit
