####################################################################################
## Copyright (c) 2016, University of British Columbia (UBC)  All rights reserved. ##
##                                                                                ##
## Redistribution  and  use  in  source   and  binary  forms,   with  or  without ##
## modification,  are permitted  provided that  the following conditions are met: ##
##   * Redistributions   of  source   code  must  retain   the   above  copyright ##
##     notice,  this   list   of   conditions   and   the  following  disclaimer. ##
##   * Redistributions  in  binary  form  must  reproduce  the  above   copyright ##
##     notice, this  list  of  conditions  and the  following  disclaimer in  the ##
##     documentation and/or  other  materials  provided  with  the  distribution. ##
##   * Neither the name of the University of British Columbia (UBC) nor the names ##
##     of   its   contributors  may  be  used  to  endorse  or   promote products ##
##     derived from  this  software without  specific  prior  written permission. ##
##                                                                                ##
## THIS  SOFTWARE IS  PROVIDED  BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" ##
## AND  ANY EXPRESS  OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT LIMITED TO,  THE ##
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE ##
## DISCLAIMED.  IN NO  EVENT SHALL University of British Columbia (UBC) BE LIABLE ##
## FOR ANY DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL ##
## DAMAGES  (INCLUDING,  BUT NOT LIMITED TO,  PROCUREMENT OF  SUBSTITUTE GOODS OR ##
## SERVICES;  LOSS OF USE,  DATA,  OR PROFITS;  OR BUSINESS INTERRUPTION) HOWEVER ##
## CAUSED AND ON ANY THEORY OF LIABILITY,  WHETHER IN CONTRACT, STRICT LIABILITY, ##
## OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ##
## OF  THIS SOFTWARE,  EVEN  IF  ADVISED  OF  THE  POSSIBILITY  OF  SUCH  DAMAGE. ##
####################################################################################

####################################################################################
##                   Cadence SoC Encounter configuration file                     ##
##             Author: Ameer Abdelhadi (ameer.abdelhadi@gmail.com)                ##
## Cell-based interleaved FIFO :: The University of British Columbia :: Nov. 2016 ##
####################################################################################

global env

# define library design kit and synthesis tools variables
# Change these links to your own design kit location
#   TSMC65: library base link
#   LIBNAM: library name
#   LIBCOR: library corner, wc: worst case, tc: typical case, bc: best case
#   LIBDBB: library DBB database link
#   LIBLEF: a link to library LEF files
#   LIBGDS: a link to library GDS files
#   LIBVRL: a link to library Verilog files
#   SYNOPS: a link to Synopsys tools directory
#   TOPMOS: Verilog top module name
set TSMC65 $env(TSMC65)
set LIBNAM $env(LIBNAM)
set LIBCOR $env(LIBCOR)
set LIBDBB $env(LIBDBB)
set LIBLEF $env(LIBLEF)
set LIBGDS $env(LIBGDS)
set LIBVRL $env(LIBVRL)
set SYNOPS $env(SYNOPSYS)

# Design variables
#   SNDTYP   : Sender   protocol type (asps,clkd)
#   RCVTYP   : receiver protocol type (asps,clkd)
#   OPRFRQ   : Bus  clock frequency for place and route
#   STAGES   : Core clock frequency for place and route
#   DATAWD   : Bus  clock frequency for timing analysis
#   RUNNAM   : Current run name, used as prefix to file names
#   SYNFRQSCL: Core clock frequency for timing analysis
set SNDTYP    $env(SNDTYP)
set RCVTYP    $env(RCVTYP)
set OPRFRQ    $env(OPRFRQ)
set STAGES    $env(STAGES)
set DATAWD    $env(DATAWD)
set RUNNAM    $env(RUNNAM)
set CLKDSYNFRQSCL $env(CLKDSYNFRQSCL)
set ASYNSYNFRQSCL $env(ASYNSYNFRQSCL)

# define environemt variables and output library locatiobs
#   RUNDIR: home directory
#   SCRDIR: scripts directory
#   RTLDIR: RTL directory
#   REPDIR: design reports directory
#   LOGDIR: run logs directory
#   SIMDIR: logic simulation related files
#   STADIR: Static Timing Analysis (STA) related files
#   RCEDIR: RC extraction related files directory
#   CTSDIR: Clock Tree Synthesis (CTS) related files
#   ECODIR: ECO (design changes in p&r) related files
#   ENCDIR: SoC Encounter related files
#   GDSDIR: generated GDS directory
#   NETDIR: netlists directory
#   PWRDIR: power estimates directory
set RUNDIR $env(RUNDIR)
set SCRDIR $env(SCRDIR)
set RTLDIR $env(RTLDIR)
set REPDIR $env(REPDIR)
set LOGDIR $env(LOGDIR)
set NETDIR $env(NETDIR)
set ENCDIR $env(ENCDIR)
set STADIR $env(STADIR)
set CTSDIR $env(CTSDIR)
set ECODIR $env(ECODIR)
set RCEDIR $env(RCEDIR)
set GDSDIR $env(GDSDIR)
set SIMDIR $env(SIMDIR)
set PWRDIR $env(PWRDIR)

global rda_Input

# Your input is structural verilog. Set the top module name 
# and also give the .sdc file you used in synthesis for the 
# clock timing constraints. Also an io file if used.
 
#set rda_Input(import_mode) {-treatUndefinedCellAsBbox 0 -verticalRow 0 -keepEmptyModule 1 }
set rda_Input(ui_netlist)        $NETDIR/${RUNNAM}.syn.vh
set rda_Input(ui_timingcon_file) $STADIR/${RUNNAM}.sdc
set rda_Input(ui_topcell)        ${SNDTYP}2${RCVTYP}_fifo

set {rda_Input(ui_netlisttype)}  {Verilog}
set {rda_Input(ui_ilmlist)}      {}
set {rda_Input(ui_settop)}       {1}
set {rda_Input(ui_celllib)}      {}
set {rda_Input(ui_iolib)}        {}
set {rda_Input(ui_areaiolib)}    {}
set {rda_Input(ui_blklib)}       {}
set {rda_Input(ui_kboxlib)}      ""


# Leave min and max empty if you have only one timing library
# (space-separated if you have more than one)
set rda_Input(ui_timelib)     "$LIBDBB/$LIBNAM$LIBCOR.lib"
set rda_Input(ui_timelib,min) {}
set rda_Input(ui_timelib,max) {}

set {rda_Input(ui_smodDef)}   {}
set {rda_Input(ui_smodData)}  {}
set {rda_Input(ui_dpath)}     {}
set {rda_Input(ui_tech_file)} {}
set rda_Input(ui_io_file)     ""
#set rda_Input(ui_io_file)   "../samples/placement.io"

# Include the footprints of your cells that fit these uses. Delay 
# can be an inverter or a buffer. Leave buf blank if you don't 
# have a non-inverting buffer. These are the "footprints" in 
# the .lib file, not the cell names. 

set rda_Input(ui_buf_footprint)   {buffd1}
set rda_Input(ui_delay_footprint) {buffd1}
set rda_Input(ui_inv_footprint)   {invd1}

# Set the name of your lef file(s) (space-separated if more than one).

# 6-layer metal design
#set rda_Input(ui_leffile) "$LIBLEF/${LIBNAM}_6lmT1.lef $LIBLEF/${LIBNAM}_6lmT2.lef"

# 7-layer metal design
#set rda_Input(ui_leffile) "$LIBLEF/${LIBNAM}_7lmT1.lef $LIBLEF/${LIBNAM}_7lmT2.lef"

# 8-layer metal design
#set rda_Input(ui_leffile) "$LIBLEF/${LIBNAM}_8lmT1.lef $LIBLEF/${LIBNAM}_8lmT2.lef"

# 9-layer metal design
set rda_Input(ui_leffile) "$LIBLEF/${LIBNAM}_9lmT2.lef"

# core utilization and core_to spacing
set {rda_Input(ui_core_cntl)}           {aspect}
set {rda_Input(ui_aspect_ratio)}        {1.0}
set {rda_Input(ui_core_util)}           {0.8}
set {rda_Input(ui_core_height)}         {}
set {rda_Input(ui_core_width)}          {}
set {rda_Input(ui_core_to_left)}        {20}
set {rda_Input(ui_core_to_right)}       {20}
set {rda_Input(ui_core_to_top)}         {20}
set {rda_Input(ui_core_to_bottom)}      {20}

set {rda_Input(ui_max_io_height)}       {0}
set {rda_Input(ui_row_height)}          {}
set {rda_Input(ui_isHorTrackHalfPitch)} {0}
set {rda_Input(ui_isVerTrackHalfPitch)} {1}
set {rda_Input(ui_ioOri)}               {R0}
set {rda_Input(ui_isOrigCenter)}        {0}
set {rda_Input(ui_exc_net)}             {}
set {rda_Input(ui_delay_limit)}         {10}
set {rda_Input(ui_net_delay)}           {500.0ps}
set {rda_Input(ui_net_load)}            {0.5pf}
set {rda_Input(ui_in_tran_delay)}       {120.0ps}
set {rda_Input(ui_captbl_file)}         {}
set {rda_Input(ui_cap_scale)}           {1.0}
set {rda_Input(ui_xcap_scale)}          {1.0}
set {rda_Input(ui_preRoute_res) }       {1.0}
set {rda_Input(ui_postRoute_res)}       {1.0}
set {rda_Input(ui_shr_scale)}           {1.0}
set {rda_Input(ui_time_unit)}           {none}
set {rda_Input(ui_cap_unit)}            {}
set rda_Input(ui_sigstormlib)           {}
set rda_Input(ui_cdb_file)              {}
set rda_Input(ui_echo_file)             {}
set rda_Input(ui_qxtech_file)           {}
set rda_Input(ui_qxlib_file)            {}
set rda_Input(ui_qxconf_file)           {}
set {rda_Input(ui_pwrnet)}              {vdd}
set {rda_Input(ui_gndnet)}              {gnd}
set {rda_Input(flip_first)}             {1}
set {rda_Input(double_back)}            {1}
set rda_Input(assign_buffer)            {0}
set rda_Input(ui_pg_connections)        [ list         \
                                            {PIN:vdd:} \
                                            {PIN:gnd:} \
                                        ]
set rda_Input(PIN:vdd:)                 {vdd}
set rda_Input(PIN:gnd:)                 {gnd}
